Base Program:
int sum_up_to_ten() {
	int sum = 0;
	int i;
	for (i = 1; i <= 10; i++) {
		sum += i;
	}
	return sum;
}

Modified Program:
int sum_up_to_ten() {
	int sum = 0;
	int i;
	for (i = 1; i <= 10; i++) {
		sum = sum + i;
	}
	return sum;
}

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
int square_sum(int n) {
	int sum = 0;
	int i;
	for (i = 1; i <= n; i++) {
		sum += i * i;
	}
	return sum;
}

Modified Program:
int square_sum(int n) {
	int sum = 0;
	int i;
	for (i = 1; i <= n; i++) {
		sum = sum + i * i;
	}
	return sum;
}

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
def count_digits(number):
	count = 0
	while number != 0:
		count += 1
		number //= 10
	return count

Modified Program:
def count_digits(number):
	count = 0
	while number != 0:
		count = count + 1
		number //= 10
	return count

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
float calculate_accumulated_result() {
	float result = 0.0;
	for(int i=0; i<10; i++)
		result += i;
	return result;
}

Modified Program:
float calculate_accumulated_result() {
	float result = 0.0;
	for(int i=0; i<10; i++)
		result = result + i;
	return result;
}

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
float addition(float n) { float result = 0; int i; for(i = n; i < n+10; i += 2 ){ result+=i; } return result; }

Modified Program:
float addition(float n) { float result = 0; int i; for(i = n; i < n+10; i = i + 2 ){ result

Error Localizer API Output:
{
    "errorLocations": {
        "addition": [
            [
                [
                    [
                        {
                            "tokentype": "Variable",
                            "name": "$cond",
                            "primed": false,
                            "line": 0
                        },
                        {
                            "tokentype": "Variable",
                            "name": "$cond",
                            "primed": false,
                            "line": 0
                        }
                    ],
                    [
                        {
                            "tokentype": "Variable",
                            "name": "$ret",
                            "primed": false,
                            "line": 0
                        },
                        {
                            "tokentype": "Variable",
                            "name": "$ret",
                            "primed": false,
                            "line": 0
                        }
                    ],
                    [
                        {
                            "tokentype": "Variable",
                            "name": "result",
                            "primed": false,
                            "line": 1
                        },
                        {
                            "tokentype": "Variable",
                            "name": "result",
                            "primed": false,
                            "line": 0
                        }
                    ],
                    [
                        {
                            "tokentype": "Variable",
                            "name": "$out",
                            "primed": false,
                            "line": 0
                        },
                        {
                            "tokentype": "Variable",
                            "name": "$out",
                            "primed": false,
                            "line": 0
                        }
                    ],
                    [
                        {
                            "tokentype": "Variable",
                            "name": "i",
                            "primed": false,
                            "line": 1
                        },
                        {
                            "tokentype": "Variable",
                            "name": "i",
                            "primed": false,
                            "line": 1
                        }
                    ],
                    [
                        {
                            "tokentype": "Variable",
                            "name": "n",
                            "primed": false,
                            "line": 1
                        },
                        {
                            "tokentype": "Variable",
                            "name": "n",
                            "primed": false,
                            "line": 1
                        }
                    ],
                    [
                        {
                            "tokentype": "Variable",
                            "name": "$in",
                            "primed": false,
                            "line": 0
                        },
                        {
                            "tokentype": "Variable",
                            "name": "$in",
                            "primed": false,
                            "line": 0
                        }
                    ]
                ],
                [
                    {
                        "errorType": "VariableValueMismatch",
                        "locationInReference": 5,
                        "locationInSubmission": 5,
                        "erroneousVariablesInSubmission": [
                            {
                                "tokentype": "Variable",
                                "name": "result",
                                "primed": false,
                                "line": 0
                            }
                        ]
                    }
                ]
            ]
        ]
    }
}

Feedback Fix API Output:
[
    {
        "lineNumber": 4,
        "oldExpr": "",
        "newExpr": "result",
        "repairStrings": [
            "Add a return value: result;"
        ]
    },
    {
        "lineNumber": 5,
        "oldExpr": "",
        "newExpr": "result = result + i",
        "repairStrings": [
            "Add result = result + i;"
        ]
    }
]

Feedback Error API Output:
[
    {
        "lineNumber": 4,
        "hintStrings": [
            "You need to add a return value"
        ]
    },
    {
        "lineNumber": 5,
        "hintStrings": [
            "You need to assign a suitable value to variable: *result*"
        ]
    }
]

Repair API Output:
[
    {
        "lineNumber": 4,
        "hintStrings": [
            "You need to add a return value"
        ]
    },
    {
        "lineNumber": 5,
        "hintStrings": [
            "You need to assign a suitable value to variable: *result*"
        ]
    }
]

Status:
FAIL


########


Base Program:
def sum_of_even_numbers():
	sum = 0
	for i in range(2, 11, 2):
		sum += i
	return sum

Modified Program:
def sum_of_even_numbers():
	sum = 0
	for i in range(2, 11, 2):
		sum = sum + i
	return sum

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
#include <stdio.h>

void increment(int n) {
	int sum = 0;
	sum += n;
}

Modified Program:
#include <stdio.h>

void increment(int n) {
	int sum = 0;
	sum = sum + n;
}

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
void increment_number_by_10(int x) {
	x += 10;
}

Modified Program:
void increment_number_by_10(int x) {
	x = x + 10;
}

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


Base Program:
def modify_string(input_str: float=None):
	return input_str += " modified" if input_str else ""

Modified Program:
def modify_string(input_str: float=None):
	return input_str = input_str + " modified" if input_str else ""

Error Localizer API Output:
{
    "errorLocations": {}
}

Feedback Fix API Output:
[]

Feedback Error API Output:
[]

Repair API Output:
[]

Status:
PASS


########


