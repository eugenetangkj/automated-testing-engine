[
    "int factorial(int n) {\n\tint result = 1;\n\twhile (n > 1) {\n\t\tresult *= n;\n\t\tn--;\n\t}\n\treturn result;\n}",
    "int find_max(int arr[], int size) {\n\tint max_value = arr[0];\n\tint index = 1;\n\twhile (index < size) {\n\t\tif (arr[index] > max_value) {\n\t\t\tmax_value = arr[index];\n\t\t}\n\t\tindex++;\n\t}\n\treturn max_value;\n}",
    "int sum_of_digits(int n) {\n\tint total = 0;\n\twhile (n != 0) {\n\t\ttotal += n % 10;\n\t\tn /= 10;\n\t}\n\treturn total;\n}",
    "int binary_search(int arr[], int size, int target) {\n\tint left = 0;\n\tint right = size - 1;\n\twhile (left <= right) {\n\t\tint mid = left + (right - left) / 2;\n\t\tif (arr[mid] == target) {\n\t\t\treturn mid;\n\t\t}\n\t\tif (arr[mid] < target) {\n\t\t\tleft = mid + 1;\n\t\t} else {\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\treturn -1;\n}",
    "int is_prime(int n) {\n\tif (n <= 1) {\n\t\treturn 0;\n\t}\n\tint i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\ti++;\n\t}\n\treturn 1;\n}",
    "int linear_search(int arr[], int size, int target) {\n\tint index = 0;\n\twhile (index < size) {\n\t\tif (arr[index] == target) {\n\t\t\treturn index;\n\t\t}\n\t\tindex++;\n\t}\n\treturn -1;\n}",
    "int power(int base, int exponent) {\n\tint result = 1;\n\twhile (exponent > 0) {\n\t\tresult *= base;\n\t\texponent--;\n\t}\n\treturn result;\n}",
    "int reverse_digits(int n) {\n\tint reversed_num = 0;\n\twhile (n != 0) {\n\t\tint digit = n % 10;\n\t\treversed_num = reversed_num * 10 + digit;\n\t\tn /= 10;\n\t}\n\treturn reversed_num;\n}",
    "int find_median(int arr[], int size) {\n\tsort(arr, size);\n\tif (size % 2 == 0) {\n\t\treturn (arr[size / 2 - 1] + arr[size / 2]) / 2;\n\t} else {\n\t\treturn arr[size / 2];\n\t}\n}",
    "int sum_of_even_numbers(int arr[], int size) {\n\tint total = 0;\n\tint index = 0;\n\twhile (index < size) {\n\t\tif (arr[index] % 2 == 0) {\n\t\t\ttotal += arr[index];\n\t\t}\n\t\tindex++;\n\t}\n\treturn total;\n}",
    "int remove_duplicates(int arr[], int size) {\n\tint index = 0;\n\twhile (index < size) {\n\t\tint current = arr[index];\n\t\tint nextIndex = index + 1;\n\t\twhile (nextIndex < size && arr[nextIndex] == current) {\n\t\t\tnextIndex++;\n\t\t}\n\t\tif (nextIndex != index + 1) {\n\t\t\tfor (int i = nextIndex; i < size; i++) {\n\t\t\t\tarr[i - (nextIndex - index)] = arr[i];\n\t\t\t}\n\t\t\tsize -= (nextIndex - index - 1);\n\t\t}\n\t\tindex++;\n\t}\n\treturn size;\n}",
    "int reverse_array(int arr[], int size) {\n\tint left = 0;\n\tint right = size - 1;\n\twhile (left < right) {\n\t\tint temp = arr[left];\n\t\tarr[left] = arr[right];\n\t\tarr[right] = temp;\n\t\tleft++;\n\t\tright--;\n\t}\n}",
    "int find_smallest(int arr[], int size) {\n\tint smallest = arr[0];\n\tint index = 1;\n\twhile (index < size) {\n\t\tif (arr[index] < smallest) {\n\t\t\tsmallest = arr[index];\n\t\t}\n\t\tindex++;\n\t}\n\treturn smallest;\n}",
    "int count_occurrences(int arr[], int size, int target) {\n\tint count = 0;\n\tint index = 0;\n\twhile (index < size) {\n\t\tif (arr[index] == target) {\n\t\t\tcount++;\n\t\t}\n\t\tindex++;\n\t}\n\treturn count;\n}",
    "int compute_average(int arr[], int size) {\n\tint total = 0;\n\tint index = 0;\n\twhile (index < size) {\n\t\ttotal += arr[index];\n\t\tindex++;\n\t}\n\treturn total / size;\n}"

]